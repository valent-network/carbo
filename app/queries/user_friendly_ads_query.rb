# frozen_string_literal: true
class UserFriendlyAdsQuery
  LIMIT = 20
  FILTERS = {
    fuels: ['–ì–∞–∑', '–ì–∞–∑ / –ë–µ–Ω–∑–∏–Ω', '–ë–µ–Ω–∑–∏–Ω', '–ì–∏–±—Ä–∏–¥', '–î–∏–∑–µ–ª—å', '–≠–ª–µ–∫—Ç—Ä–æ'],
    wheels: ['–ü–µ—Ä–µ–¥–Ω–∏–π', '–ó–∞–¥–Ω–∏–π', '–ü–æ–ª–Ω—ã–π'],
    carcasses: ['–•—ç—Ç—á–±–µ–∫', '–ö—É–ø–µ', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª', '–°–µ–¥–∞–Ω', '–ü–∏–∫–∞–ø', '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ / –ö—Ä–æ—Å—Å–æ–≤–µ—Ä', '–õ–∏—Ñ—Ç–±–µ–∫', '–ö–∞–±—Ä–∏–æ–ª–µ—Ç', '–†–æ–¥—Å—Ç–µ—Ä', '–ú–∏–Ω–∏–≤—ç–Ω'],
    gears: ['–ê–≤—Ç–æ–º–∞—Ç', '–†—É—á–Ω–∞—è / –ú–µ—Ö–∞–Ω–∏–∫–∞', '–†–æ–±–æ—Ç', '–í–∞—Ä–∏–∞—Ç–æ—Ä', '–¢–∏–ø—Ç—Ä–æ–Ω–∏–∫'],
    hops_count: ['–î—Ä—É–∑–µ–π', '–î—Ä—É–∑–µ–π –¥—Ä—É–∑–µ–π', 'ü§ùü§ùü§ù', 'ü§ùü§ùü§ùü§ù'],
  }
  DEFAULT_HOPS_COUNT = ENV.fetch('DEFAULT_HOPS_COUNT', 3)

  def call(user:, offset: 0, limit: LIMIT, filters: {})
    user_contacts_matched_phone_numbers = user.user_contacts.where('user_contacts.name ILIKE ?', "%#{filters[:query]}%").pluck(:phone_number_id) if filters[:query].present?
    effective_ads = EffectiveAds.new.call(filters: filters, should_search_query: user_contacts_matched_phone_numbers.blank?)

    hops_count = FILTERS[:hops_count].index(filters[:hops_count]&.first)

    if hops_count == 0 || filters[:contacts_mode] == 'directFriends'
      ads = effective_ads.where("ads.phone_number_id IN (SELECT phone_number_id FROM user_contacts WHERE user_id = #{user.id})")
    elsif user_contacts_matched_phone_numbers.present?
      known_numbers = KnownNumbersFiltered.new.call(user.id, filtered_friends_phone_number_ids: user_contacts_matched_phone_numbers)
      ads = effective_ads.where("ads.phone_number_id IN (#{known_numbers})")
    else
      ads = effective_ads.joins("JOIN user_contacts ON ads.phone_number_id = user_contacts.phone_number_id")
      ads = ads.joins("JOIN user_connections ON user_connections.user_id = #{user.id} AND user_contacts.user_id = user_connections.connection_id")
      ads = ads.where('user_connections.hops_count <= ?', hops_count || DEFAULT_HOPS_COUNT)
    end

    query = ads.offset(offset)
    query = query.order('ads.id DESC')
    query = query.limit(limit) if limit > 0

    Ad.where(id: query.select(:id).distinct(:id).map(&:id)).order('ads.created_at DESC')
  end
end
