class AdminUser < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[AdminUser, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def email: () -> String

    def email=: (String) -> String

    def email?: () -> bool

    def email_changed?: () -> bool

    def email_change: () -> [ String?, String? ]

    def email_will_change!: () -> void

    def email_was: () -> String?

    def email_previously_changed?: () -> bool

    def email_previous_change: () -> Array[String?]?

    def email_previously_was: () -> String?

    def email_before_last_save: () -> String?

    def email_change_to_be_saved: () -> Array[String?]?

    def email_in_database: () -> String?

    def saved_change_to_email: () -> Array[String?]?

    def saved_change_to_email?: () -> bool

    def will_save_change_to_email?: () -> bool

    def restore_email!: () -> void

    def clear_email_change: () -> void

    def encrypted_password: () -> String

    def encrypted_password=: (String) -> String

    def encrypted_password?: () -> bool

    def encrypted_password_changed?: () -> bool

    def encrypted_password_change: () -> [ String?, String? ]

    def encrypted_password_will_change!: () -> void

    def encrypted_password_was: () -> String?

    def encrypted_password_previously_changed?: () -> bool

    def encrypted_password_previous_change: () -> Array[String?]?

    def encrypted_password_previously_was: () -> String?

    def encrypted_password_before_last_save: () -> String?

    def encrypted_password_change_to_be_saved: () -> Array[String?]?

    def encrypted_password_in_database: () -> String?

    def saved_change_to_encrypted_password: () -> Array[String?]?

    def saved_change_to_encrypted_password?: () -> bool

    def will_save_change_to_encrypted_password?: () -> bool

    def restore_encrypted_password!: () -> void

    def clear_encrypted_password_change: () -> void

    def reset_password_token: () -> String?

    def reset_password_token=: (String?) -> String?

    def reset_password_token?: () -> bool

    def reset_password_token_changed?: () -> bool

    def reset_password_token_change: () -> [ String?, String? ]

    def reset_password_token_will_change!: () -> void

    def reset_password_token_was: () -> String?

    def reset_password_token_previously_changed?: () -> bool

    def reset_password_token_previous_change: () -> Array[String?]?

    def reset_password_token_previously_was: () -> String?

    def reset_password_token_before_last_save: () -> String?

    def reset_password_token_change_to_be_saved: () -> Array[String?]?

    def reset_password_token_in_database: () -> String?

    def saved_change_to_reset_password_token: () -> Array[String?]?

    def saved_change_to_reset_password_token?: () -> bool

    def will_save_change_to_reset_password_token?: () -> bool

    def restore_reset_password_token!: () -> void

    def clear_reset_password_token_change: () -> void

    def reset_password_sent_at: () -> ActiveSupport::TimeWithZone?

    def reset_password_sent_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def reset_password_sent_at?: () -> bool

    def reset_password_sent_at_changed?: () -> bool

    def reset_password_sent_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def reset_password_sent_at_will_change!: () -> void

    def reset_password_sent_at_was: () -> ActiveSupport::TimeWithZone?

    def reset_password_sent_at_previously_changed?: () -> bool

    def reset_password_sent_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def reset_password_sent_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def reset_password_sent_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def reset_password_sent_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def reset_password_sent_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_reset_password_sent_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_reset_password_sent_at?: () -> bool

    def will_save_change_to_reset_password_sent_at?: () -> bool

    def restore_reset_password_sent_at!: () -> void

    def clear_reset_password_sent_at_change: () -> void

    def remember_created_at: () -> ActiveSupport::TimeWithZone?

    def remember_created_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def remember_created_at?: () -> bool

    def remember_created_at_changed?: () -> bool

    def remember_created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def remember_created_at_will_change!: () -> void

    def remember_created_at_was: () -> ActiveSupport::TimeWithZone?

    def remember_created_at_previously_changed?: () -> bool

    def remember_created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def remember_created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def remember_created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def remember_created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def remember_created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_remember_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_remember_created_at?: () -> bool

    def will_save_change_to_remember_created_at?: () -> bool

    def restore_remember_created_at!: () -> void

    def clear_remember_created_at_change: () -> void
  end
  include GeneratedAttributeMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[AdminUser, Integer]
    include Enumerable[AdminUser]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[AdminUser, Integer]
  end
end
